/* This file was generated by SableCC (http://www.sablecc.org/). */

package goplusplus.node;

import java.util.*;
import goplusplus.analysis.*;

@SuppressWarnings("nls")
public final class ASwitchAstStm extends PAstStm
{
    private PAstStm _astStm_;
    private PAstExp _astExp_;
    private final LinkedList<PAstSwitchStm> _astSwitchStm_ = new LinkedList<PAstSwitchStm>();

    public ASwitchAstStm()
    {
        // Constructor
    }

    public ASwitchAstStm(
        @SuppressWarnings("hiding") PAstStm _astStm_,
        @SuppressWarnings("hiding") PAstExp _astExp_,
        @SuppressWarnings("hiding") List<?> _astSwitchStm_)
    {
        // Constructor
        setAstStm(_astStm_);

        setAstExp(_astExp_);

        setAstSwitchStm(_astSwitchStm_);

    }

    @Override
    public Object clone()
    {
        return new ASwitchAstStm(
            cloneNode(this._astStm_),
            cloneNode(this._astExp_),
            cloneList(this._astSwitchStm_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASwitchAstStm(this);
    }

    public PAstStm getAstStm()
    {
        return this._astStm_;
    }

    public void setAstStm(PAstStm node)
    {
        if(this._astStm_ != null)
        {
            this._astStm_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._astStm_ = node;
    }

    public PAstExp getAstExp()
    {
        return this._astExp_;
    }

    public void setAstExp(PAstExp node)
    {
        if(this._astExp_ != null)
        {
            this._astExp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._astExp_ = node;
    }

    public LinkedList<PAstSwitchStm> getAstSwitchStm()
    {
        return this._astSwitchStm_;
    }

    public void setAstSwitchStm(List<?> list)
    {
        for(PAstSwitchStm e : this._astSwitchStm_)
        {
            e.parent(null);
        }
        this._astSwitchStm_.clear();

        for(Object obj_e : list)
        {
            PAstSwitchStm e = (PAstSwitchStm) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._astSwitchStm_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._astStm_)
            + toString(this._astExp_)
            + toString(this._astSwitchStm_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._astStm_ == child)
        {
            this._astStm_ = null;
            return;
        }

        if(this._astExp_ == child)
        {
            this._astExp_ = null;
            return;
        }

        if(this._astSwitchStm_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._astStm_ == oldChild)
        {
            setAstStm((PAstStm) newChild);
            return;
        }

        if(this._astExp_ == oldChild)
        {
            setAstExp((PAstExp) newChild);
            return;
        }

        for(ListIterator<PAstSwitchStm> i = this._astSwitchStm_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PAstSwitchStm) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
