/* This file was generated by SableCC (http://www.sablecc.org/). */

package goplusplus.node;

import goplusplus.analysis.*;

@SuppressWarnings("nls")
public final class AUnaryOpAstExp extends PAstExp
{
    private PAstUnaryOp _astUnaryOp_;
    private PAstExp _astExp_;

    public AUnaryOpAstExp()
    {
        // Constructor
    }

    public AUnaryOpAstExp(
        @SuppressWarnings("hiding") PAstUnaryOp _astUnaryOp_,
        @SuppressWarnings("hiding") PAstExp _astExp_)
    {
        // Constructor
        setAstUnaryOp(_astUnaryOp_);

        setAstExp(_astExp_);

    }

    @Override
    public Object clone()
    {
        return new AUnaryOpAstExp(
            cloneNode(this._astUnaryOp_),
            cloneNode(this._astExp_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAUnaryOpAstExp(this);
    }

    public PAstUnaryOp getAstUnaryOp()
    {
        return this._astUnaryOp_;
    }

    public void setAstUnaryOp(PAstUnaryOp node)
    {
        if(this._astUnaryOp_ != null)
        {
            this._astUnaryOp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._astUnaryOp_ = node;
    }

    public PAstExp getAstExp()
    {
        return this._astExp_;
    }

    public void setAstExp(PAstExp node)
    {
        if(this._astExp_ != null)
        {
            this._astExp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._astExp_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._astUnaryOp_)
            + toString(this._astExp_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._astUnaryOp_ == child)
        {
            this._astUnaryOp_ = null;
            return;
        }

        if(this._astExp_ == child)
        {
            this._astExp_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._astUnaryOp_ == oldChild)
        {
            setAstUnaryOp((PAstUnaryOp) newChild);
            return;
        }

        if(this._astExp_ == oldChild)
        {
            setAstExp((PAstExp) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
