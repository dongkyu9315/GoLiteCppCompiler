/* This file was generated by SableCC (http://www.sablecc.org/). */

package goplusplus.node;

import java.util.*;
import goplusplus.analysis.*;

@SuppressWarnings("nls")
public final class AAssignAstStm extends PAstStm
{
    private final LinkedList<PAstExp> _lval_ = new LinkedList<PAstExp>();
    private final LinkedList<PAstExp> _rval_ = new LinkedList<PAstExp>();

    public AAssignAstStm()
    {
        // Constructor
    }

    public AAssignAstStm(
        @SuppressWarnings("hiding") List<?> _lval_,
        @SuppressWarnings("hiding") List<?> _rval_)
    {
        // Constructor
        setLval(_lval_);

        setRval(_rval_);

    }

    @Override
    public Object clone()
    {
        return new AAssignAstStm(
            cloneList(this._lval_),
            cloneList(this._rval_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAssignAstStm(this);
    }

    public LinkedList<PAstExp> getLval()
    {
        return this._lval_;
    }

    public void setLval(List<?> list)
    {
        for(PAstExp e : this._lval_)
        {
            e.parent(null);
        }
        this._lval_.clear();

        for(Object obj_e : list)
        {
            PAstExp e = (PAstExp) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._lval_.add(e);
        }
    }

    public LinkedList<PAstExp> getRval()
    {
        return this._rval_;
    }

    public void setRval(List<?> list)
    {
        for(PAstExp e : this._rval_)
        {
            e.parent(null);
        }
        this._rval_.clear();

        for(Object obj_e : list)
        {
            PAstExp e = (PAstExp) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._rval_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._lval_)
            + toString(this._rval_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._lval_.remove(child))
        {
            return;
        }

        if(this._rval_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<PAstExp> i = this._lval_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PAstExp) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PAstExp> i = this._rval_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PAstExp) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
