/* This file was generated by SableCC (http://www.sablecc.org/). */

package goplusplus.node;

import goplusplus.analysis.*;

@SuppressWarnings("nls")
public final class AIncDecAstStm extends PAstStm
{
    private PAstExp _astExp_;
    private PAstPostOp _astPostOp_;

    public AIncDecAstStm()
    {
        // Constructor
    }

    public AIncDecAstStm(
        @SuppressWarnings("hiding") PAstExp _astExp_,
        @SuppressWarnings("hiding") PAstPostOp _astPostOp_)
    {
        // Constructor
        setAstExp(_astExp_);

        setAstPostOp(_astPostOp_);

    }

    @Override
    public Object clone()
    {
        return new AIncDecAstStm(
            cloneNode(this._astExp_),
            cloneNode(this._astPostOp_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIncDecAstStm(this);
    }

    public PAstExp getAstExp()
    {
        return this._astExp_;
    }

    public void setAstExp(PAstExp node)
    {
        if(this._astExp_ != null)
        {
            this._astExp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._astExp_ = node;
    }

    public PAstPostOp getAstPostOp()
    {
        return this._astPostOp_;
    }

    public void setAstPostOp(PAstPostOp node)
    {
        if(this._astPostOp_ != null)
        {
            this._astPostOp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._astPostOp_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._astExp_)
            + toString(this._astPostOp_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._astExp_ == child)
        {
            this._astExp_ = null;
            return;
        }

        if(this._astPostOp_ == child)
        {
            this._astPostOp_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._astExp_ == oldChild)
        {
            setAstExp((PAstExp) newChild);
            return;
        }

        if(this._astPostOp_ == oldChild)
        {
            setAstPostOp((PAstPostOp) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
