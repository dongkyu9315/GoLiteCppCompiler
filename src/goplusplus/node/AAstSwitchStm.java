/* This file was generated by SableCC (http://www.sablecc.org/). */

package goplusplus.node;

import java.util.*;
import goplusplus.analysis.*;

@SuppressWarnings("nls")
public final class AAstSwitchStm extends PAstSwitchStm
{
    private PAstSwitchCase _astSwitchCase_;
    private final LinkedList<PAstStm> _astStm_ = new LinkedList<PAstStm>();
    private PAstFallthroughStm _astFallthroughStm_;

    public AAstSwitchStm()
    {
        // Constructor
    }

    public AAstSwitchStm(
        @SuppressWarnings("hiding") PAstSwitchCase _astSwitchCase_,
        @SuppressWarnings("hiding") List<?> _astStm_,
        @SuppressWarnings("hiding") PAstFallthroughStm _astFallthroughStm_)
    {
        // Constructor
        setAstSwitchCase(_astSwitchCase_);

        setAstStm(_astStm_);

        setAstFallthroughStm(_astFallthroughStm_);

    }

    @Override
    public Object clone()
    {
        return new AAstSwitchStm(
            cloneNode(this._astSwitchCase_),
            cloneList(this._astStm_),
            cloneNode(this._astFallthroughStm_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAstSwitchStm(this);
    }

    public PAstSwitchCase getAstSwitchCase()
    {
        return this._astSwitchCase_;
    }

    public void setAstSwitchCase(PAstSwitchCase node)
    {
        if(this._astSwitchCase_ != null)
        {
            this._astSwitchCase_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._astSwitchCase_ = node;
    }

    public LinkedList<PAstStm> getAstStm()
    {
        return this._astStm_;
    }

    public void setAstStm(List<?> list)
    {
        for(PAstStm e : this._astStm_)
        {
            e.parent(null);
        }
        this._astStm_.clear();

        for(Object obj_e : list)
        {
            PAstStm e = (PAstStm) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._astStm_.add(e);
        }
    }

    public PAstFallthroughStm getAstFallthroughStm()
    {
        return this._astFallthroughStm_;
    }

    public void setAstFallthroughStm(PAstFallthroughStm node)
    {
        if(this._astFallthroughStm_ != null)
        {
            this._astFallthroughStm_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._astFallthroughStm_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._astSwitchCase_)
            + toString(this._astStm_)
            + toString(this._astFallthroughStm_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._astSwitchCase_ == child)
        {
            this._astSwitchCase_ = null;
            return;
        }

        if(this._astStm_.remove(child))
        {
            return;
        }

        if(this._astFallthroughStm_ == child)
        {
            this._astFallthroughStm_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._astSwitchCase_ == oldChild)
        {
            setAstSwitchCase((PAstSwitchCase) newChild);
            return;
        }

        for(ListIterator<PAstStm> i = this._astStm_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PAstStm) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._astFallthroughStm_ == oldChild)
        {
            setAstFallthroughStm((PAstFallthroughStm) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
