/* This file was generated by SableCC (http://www.sablecc.org/). */

package goplusplus.node;

import java.util.*;
import goplusplus.analysis.*;

@SuppressWarnings("nls")
public final class ALongifAstStm extends PAstStm
{
    private PAstStm _init_;
    private PAstExp _condition_;
    private final LinkedList<PAstStm> _ifStms_ = new LinkedList<PAstStm>();
    private final LinkedList<PAstStm> _elseStms_ = new LinkedList<PAstStm>();

    public ALongifAstStm()
    {
        // Constructor
    }

    public ALongifAstStm(
        @SuppressWarnings("hiding") PAstStm _init_,
        @SuppressWarnings("hiding") PAstExp _condition_,
        @SuppressWarnings("hiding") List<?> _ifStms_,
        @SuppressWarnings("hiding") List<?> _elseStms_)
    {
        // Constructor
        setInit(_init_);

        setCondition(_condition_);

        setIfStms(_ifStms_);

        setElseStms(_elseStms_);

    }

    @Override
    public Object clone()
    {
        return new ALongifAstStm(
            cloneNode(this._init_),
            cloneNode(this._condition_),
            cloneList(this._ifStms_),
            cloneList(this._elseStms_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseALongifAstStm(this);
    }

    public PAstStm getInit()
    {
        return this._init_;
    }

    public void setInit(PAstStm node)
    {
        if(this._init_ != null)
        {
            this._init_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._init_ = node;
    }

    public PAstExp getCondition()
    {
        return this._condition_;
    }

    public void setCondition(PAstExp node)
    {
        if(this._condition_ != null)
        {
            this._condition_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._condition_ = node;
    }

    public LinkedList<PAstStm> getIfStms()
    {
        return this._ifStms_;
    }

    public void setIfStms(List<?> list)
    {
        for(PAstStm e : this._ifStms_)
        {
            e.parent(null);
        }
        this._ifStms_.clear();

        for(Object obj_e : list)
        {
            PAstStm e = (PAstStm) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._ifStms_.add(e);
        }
    }

    public LinkedList<PAstStm> getElseStms()
    {
        return this._elseStms_;
    }

    public void setElseStms(List<?> list)
    {
        for(PAstStm e : this._elseStms_)
        {
            e.parent(null);
        }
        this._elseStms_.clear();

        for(Object obj_e : list)
        {
            PAstStm e = (PAstStm) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._elseStms_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._init_)
            + toString(this._condition_)
            + toString(this._ifStms_)
            + toString(this._elseStms_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._init_ == child)
        {
            this._init_ = null;
            return;
        }

        if(this._condition_ == child)
        {
            this._condition_ = null;
            return;
        }

        if(this._ifStms_.remove(child))
        {
            return;
        }

        if(this._elseStms_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._init_ == oldChild)
        {
            setInit((PAstStm) newChild);
            return;
        }

        if(this._condition_ == oldChild)
        {
            setCondition((PAstExp) newChild);
            return;
        }

        for(ListIterator<PAstStm> i = this._ifStms_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PAstStm) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PAstStm> i = this._elseStms_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PAstStm) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
