/* This file was generated by SableCC (http://www.sablecc.org/). */

package goplusplus.node;

import java.util.*;
import goplusplus.analysis.*;

@SuppressWarnings("nls")
public final class AFuncCallAstExp extends PAstExp
{
    private PAstExp _name_;
    private final LinkedList<PAstExp> _args_ = new LinkedList<PAstExp>();

    public AFuncCallAstExp()
    {
        // Constructor
    }

    public AFuncCallAstExp(
        @SuppressWarnings("hiding") PAstExp _name_,
        @SuppressWarnings("hiding") List<?> _args_)
    {
        // Constructor
        setName(_name_);

        setArgs(_args_);

    }

    @Override
    public Object clone()
    {
        return new AFuncCallAstExp(
            cloneNode(this._name_),
            cloneList(this._args_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFuncCallAstExp(this);
    }

    public PAstExp getName()
    {
        return this._name_;
    }

    public void setName(PAstExp node)
    {
        if(this._name_ != null)
        {
            this._name_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._name_ = node;
    }

    public LinkedList<PAstExp> getArgs()
    {
        return this._args_;
    }

    public void setArgs(List<?> list)
    {
        for(PAstExp e : this._args_)
        {
            e.parent(null);
        }
        this._args_.clear();

        for(Object obj_e : list)
        {
            PAstExp e = (PAstExp) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._args_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._name_)
            + toString(this._args_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._name_ == child)
        {
            this._name_ = null;
            return;
        }

        if(this._args_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._name_ == oldChild)
        {
            setName((PAstExp) newChild);
            return;
        }

        for(ListIterator<PAstExp> i = this._args_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PAstExp) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
