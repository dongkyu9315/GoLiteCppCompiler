/* This file was generated by SableCC (http://www.sablecc.org/). */

package goplusplus.analysis;

import java.util.*;
import goplusplus.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAstProgram(AAstProgram node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVarDecAstDecl(AVarDecAstDecl node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATypeDecAstDecl(ATypeDecAstDecl node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFuncDecAstDecl(AFuncDecAstDecl node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATypeAstVarDecl(ATypeAstVarDecl node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpAstVarDecl(AExpAstVarDecl node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATypeExpAstVarDecl(ATypeExpAstVarDecl node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAstTypeDecl(AAstTypeDecl node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAstFuncDecl(AAstFuncDecl node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAstFuncParam(AAstFuncParam node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABasicAstTypeExp(ABasicAstTypeExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASliceAstTypeExp(ASliceAstTypeExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArrayAstTypeExp(AArrayAstTypeExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStructAstTypeExp(AStructAstTypeExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAliasAstTypeExp(AAliasAstTypeExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAstStructField(AAstStructField node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEmptyAstStm(AEmptyAstStm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpAstStm(AExpAstStm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAssignAstStm(AAssignAstStm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOpAssignAstStm(AOpAssignAstStm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVarDeclAstStm(AVarDeclAstStm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAShortDeclAstStm(AShortDeclAstStm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATypeDeclAstStm(ATypeDeclAstStm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIncDecAstStm(AIncDecAstStm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPrintAstStm(APrintAstStm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPrintlnAstStm(APrintlnAstStm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAReturnAstStm(AReturnAstStm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAShortifAstStm(AShortifAstStm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALongifAstStm(ALongifAstStm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASwitchAstStm(ASwitchAstStm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAForAstStm(AForAstStm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABlockAstStm(ABlockAstStm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABreakAstStm(ABreakAstStm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAContinueAstStm(AContinueAstStm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParenAstExp(AParenAstExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdAstExp(AIdAstExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALitAstExp(ALitAstExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAUnaryOpAstExp(AUnaryOpAstExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABinaryOpAstExp(ABinaryOpAstExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFuncCallAstExp(AFuncCallAstExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAppendAstExp(AAppendAstExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABasicCastAstExp(ABasicCastAstExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArrayAccessAstExp(AArrayAccessAstExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFieldAccessAstExp(AFieldAccessAstExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAstSwitchStm(AAstSwitchStm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADefaultAstSwitchCase(ADefaultAstSwitchCase node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACaseAstSwitchCase(ACaseAstSwitchCase node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIntAstLiteral(AIntAstLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFloatAstLiteral(AFloatAstLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARuneAstLiteral(ARuneAstLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStringAstLiteral(AStringAstLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABoolAstLiteral(ABoolAstLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAddAstBinaryOp(AAddAstBinaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASubAstBinaryOp(ASubAstBinaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMulAstBinaryOp(AMulAstBinaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADivAstBinaryOp(ADivAstBinaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAModAstBinaryOp(AModAstBinaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABitorAstBinaryOp(ABitorAstBinaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABitandAstBinaryOp(ABitandAstBinaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEqAstBinaryOp(AEqAstBinaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANoteqAstBinaryOp(ANoteqAstBinaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALtAstBinaryOp(ALtAstBinaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALeqAstBinaryOp(ALeqAstBinaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAGtAstBinaryOp(AGtAstBinaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAGeqAstBinaryOp(AGeqAstBinaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACaretAstBinaryOp(ACaretAstBinaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALshiftAstBinaryOp(ALshiftAstBinaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARshiftAstBinaryOp(ARshiftAstBinaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABitclearAstBinaryOp(ABitclearAstBinaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOrAstBinaryOp(AOrAstBinaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAndAstBinaryOp(AAndAstBinaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAddEqAstOpAssign(AAddEqAstOpAssign node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASubEqAstOpAssign(ASubEqAstOpAssign node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMulEqAstOpAssign(AMulEqAstOpAssign node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADivEqAstOpAssign(ADivEqAstOpAssign node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAModEqAstOpAssign(AModEqAstOpAssign node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABitorEqAstOpAssign(ABitorEqAstOpAssign node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABitandEqAstOpAssign(ABitandEqAstOpAssign node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACaretEqAstOpAssign(ACaretEqAstOpAssign node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALshiftEqAstOpAssign(ALshiftEqAstOpAssign node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARshiftEqAstOpAssign(ARshiftEqAstOpAssign node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABitclearEqAstOpAssign(ABitclearEqAstOpAssign node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPlusAstUnaryOp(APlusAstUnaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMinusAstUnaryOp(AMinusAstUnaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANotAstUnaryOp(ANotAstUnaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACaretAstUnaryOp(ACaretAstUnaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIncAstPostOp(AIncAstPostOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecAstPostOp(ADecAstPostOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAstFallthroughStm(AAstFallthroughStm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEol(TEol node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBlank(TBlank node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBreak(TBreak node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDefault(TDefault node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFunc(TFunc node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTInterface(TInterface node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSelect(TSelect node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCase(TCase node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDefer(TDefer node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTGo(TGo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMap(TMap node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTStruct(TStruct node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTChan(TChan node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTElse(TElse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTGoto(TGoto node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPackage(TPackage node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSwitch(TSwitch node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTConst(TConst node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFallthrough(TFallthrough node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIf(TIf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRange(TRange node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTType(TType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTContinue(TContinue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFor(TFor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTImport(TImport node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTReturn(TReturn node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVar(TVar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBasicTypes(TBasicTypes node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPrint(TPrint node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPrintln(TPrintln node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAppend(TAppend node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBoolLit(TBoolLit node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAdd(TAdd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSub(TSub node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMul(TMul node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDiv(TDiv node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMod(TMod node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBitAnd(TBitAnd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBitOr(TBitOr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCaret(TCaret node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLshift(TLshift node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRshift(TRshift node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBitclear(TBitclear node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPluseq(TPluseq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSubeq(TSubeq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMuleq(TMuleq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDiveq(TDiveq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTModeq(TModeq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAndeq(TAndeq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOreq(TOreq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTXoreq(TXoreq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLshifteq(TLshifteq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRshifteq(TRshifteq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBitcleareq(TBitcleareq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAnd(TAnd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOr(TOr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTReceive(TReceive node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIncrement(TIncrement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDecrement(TDecrement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEq(TEq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLt(TLt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTGt(TGt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAssign(TAssign node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNot(TNot node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNoteq(TNoteq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLeq(TLeq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTGeq(TGeq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTShortdecl(TShortdecl node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVarargs(TVarargs node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLeftpar(TLeftpar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLeftsq(TLeftsq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLeftcurl(TLeftcurl node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDot(TDot node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRightpar(TRightpar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRightsq(TRightsq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRightcurl(TRightcurl node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSemi(TSemi node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTColon(TColon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLineComment(TLineComment node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBlockComment(TBlockComment node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIntLit(TIntLit node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFloatLit(TFloatLit node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRuneLit(TRuneLit node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTStringLit(TStringLit node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTId(TId node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseInvalidToken(InvalidToken node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
