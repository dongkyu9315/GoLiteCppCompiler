/* This file was generated by SableCC (http://www.sablecc.org/). */

package goplusplus.analysis;

import java.util.*;
import goplusplus.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPAstProgram().apply(this);
        outStart(node);
    }

    public void inAAstProgram(AAstProgram node)
    {
        defaultIn(node);
    }

    public void outAAstProgram(AAstProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAstProgram(AAstProgram node)
    {
        inAAstProgram(node);
        {
            List<PAstDecl> copy = new ArrayList<PAstDecl>(node.getDecl());
            Collections.reverse(copy);
            for(PAstDecl e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getPackage() != null)
        {
            node.getPackage().apply(this);
        }
        outAAstProgram(node);
    }

    public void inAVarDecAstDecl(AVarDecAstDecl node)
    {
        defaultIn(node);
    }

    public void outAVarDecAstDecl(AVarDecAstDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarDecAstDecl(AVarDecAstDecl node)
    {
        inAVarDecAstDecl(node);
        {
            List<PAstVarDecl> copy = new ArrayList<PAstVarDecl>(node.getAstVarDecl());
            Collections.reverse(copy);
            for(PAstVarDecl e : copy)
            {
                e.apply(this);
            }
        }
        outAVarDecAstDecl(node);
    }

    public void inATypeDecAstDecl(ATypeDecAstDecl node)
    {
        defaultIn(node);
    }

    public void outATypeDecAstDecl(ATypeDecAstDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeDecAstDecl(ATypeDecAstDecl node)
    {
        inATypeDecAstDecl(node);
        {
            List<PAstTypeDecl> copy = new ArrayList<PAstTypeDecl>(node.getAstTypeDecl());
            Collections.reverse(copy);
            for(PAstTypeDecl e : copy)
            {
                e.apply(this);
            }
        }
        outATypeDecAstDecl(node);
    }

    public void inAFuncDecAstDecl(AFuncDecAstDecl node)
    {
        defaultIn(node);
    }

    public void outAFuncDecAstDecl(AFuncDecAstDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncDecAstDecl(AFuncDecAstDecl node)
    {
        inAFuncDecAstDecl(node);
        if(node.getAstFuncDecl() != null)
        {
            node.getAstFuncDecl().apply(this);
        }
        outAFuncDecAstDecl(node);
    }

    public void inATypeAstVarDecl(ATypeAstVarDecl node)
    {
        defaultIn(node);
    }

    public void outATypeAstVarDecl(ATypeAstVarDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeAstVarDecl(ATypeAstVarDecl node)
    {
        inATypeAstVarDecl(node);
        if(node.getAstTypeExp() != null)
        {
            node.getAstTypeExp().apply(this);
        }
        {
            List<TId> copy = new ArrayList<TId>(node.getId());
            Collections.reverse(copy);
            for(TId e : copy)
            {
                e.apply(this);
            }
        }
        outATypeAstVarDecl(node);
    }

    public void inAExpAstVarDecl(AExpAstVarDecl node)
    {
        defaultIn(node);
    }

    public void outAExpAstVarDecl(AExpAstVarDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpAstVarDecl(AExpAstVarDecl node)
    {
        inAExpAstVarDecl(node);
        {
            List<PAstExp> copy = new ArrayList<PAstExp>(node.getAstExp());
            Collections.reverse(copy);
            for(PAstExp e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<TId> copy = new ArrayList<TId>(node.getId());
            Collections.reverse(copy);
            for(TId e : copy)
            {
                e.apply(this);
            }
        }
        outAExpAstVarDecl(node);
    }

    public void inATypeExpAstVarDecl(ATypeExpAstVarDecl node)
    {
        defaultIn(node);
    }

    public void outATypeExpAstVarDecl(ATypeExpAstVarDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeExpAstVarDecl(ATypeExpAstVarDecl node)
    {
        inATypeExpAstVarDecl(node);
        {
            List<PAstExp> copy = new ArrayList<PAstExp>(node.getAstExp());
            Collections.reverse(copy);
            for(PAstExp e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getAstTypeExp() != null)
        {
            node.getAstTypeExp().apply(this);
        }
        {
            List<TId> copy = new ArrayList<TId>(node.getId());
            Collections.reverse(copy);
            for(TId e : copy)
            {
                e.apply(this);
            }
        }
        outATypeExpAstVarDecl(node);
    }

    public void inAAstTypeDecl(AAstTypeDecl node)
    {
        defaultIn(node);
    }

    public void outAAstTypeDecl(AAstTypeDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAstTypeDecl(AAstTypeDecl node)
    {
        inAAstTypeDecl(node);
        if(node.getAstTypeExp() != null)
        {
            node.getAstTypeExp().apply(this);
        }
        {
            List<TId> copy = new ArrayList<TId>(node.getId());
            Collections.reverse(copy);
            for(TId e : copy)
            {
                e.apply(this);
            }
        }
        outAAstTypeDecl(node);
    }

    public void inAAstFuncDecl(AAstFuncDecl node)
    {
        defaultIn(node);
    }

    public void outAAstFuncDecl(AAstFuncDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAstFuncDecl(AAstFuncDecl node)
    {
        inAAstFuncDecl(node);
        {
            List<PAstStm> copy = new ArrayList<PAstStm>(node.getAstStm());
            Collections.reverse(copy);
            for(PAstStm e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getAstTypeExp() != null)
        {
            node.getAstTypeExp().apply(this);
        }
        {
            List<PAstFuncParam> copy = new ArrayList<PAstFuncParam>(node.getAstFuncParam());
            Collections.reverse(copy);
            for(PAstFuncParam e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAAstFuncDecl(node);
    }

    public void inAAstFuncParam(AAstFuncParam node)
    {
        defaultIn(node);
    }

    public void outAAstFuncParam(AAstFuncParam node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAstFuncParam(AAstFuncParam node)
    {
        inAAstFuncParam(node);
        if(node.getAstTypeExp() != null)
        {
            node.getAstTypeExp().apply(this);
        }
        {
            List<TId> copy = new ArrayList<TId>(node.getId());
            Collections.reverse(copy);
            for(TId e : copy)
            {
                e.apply(this);
            }
        }
        outAAstFuncParam(node);
    }

    public void inABasicAstTypeExp(ABasicAstTypeExp node)
    {
        defaultIn(node);
    }

    public void outABasicAstTypeExp(ABasicAstTypeExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABasicAstTypeExp(ABasicAstTypeExp node)
    {
        inABasicAstTypeExp(node);
        if(node.getBasicTypes() != null)
        {
            node.getBasicTypes().apply(this);
        }
        outABasicAstTypeExp(node);
    }

    public void inASliceAstTypeExp(ASliceAstTypeExp node)
    {
        defaultIn(node);
    }

    public void outASliceAstTypeExp(ASliceAstTypeExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASliceAstTypeExp(ASliceAstTypeExp node)
    {
        inASliceAstTypeExp(node);
        if(node.getAstTypeExp() != null)
        {
            node.getAstTypeExp().apply(this);
        }
        outASliceAstTypeExp(node);
    }

    public void inAArrayAstTypeExp(AArrayAstTypeExp node)
    {
        defaultIn(node);
    }

    public void outAArrayAstTypeExp(AArrayAstTypeExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayAstTypeExp(AArrayAstTypeExp node)
    {
        inAArrayAstTypeExp(node);
        if(node.getAstTypeExp() != null)
        {
            node.getAstTypeExp().apply(this);
        }
        if(node.getSize() != null)
        {
            node.getSize().apply(this);
        }
        outAArrayAstTypeExp(node);
    }

    public void inAStructAstTypeExp(AStructAstTypeExp node)
    {
        defaultIn(node);
    }

    public void outAStructAstTypeExp(AStructAstTypeExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStructAstTypeExp(AStructAstTypeExp node)
    {
        inAStructAstTypeExp(node);
        {
            List<PAstStructField> copy = new ArrayList<PAstStructField>(node.getAstStructField());
            Collections.reverse(copy);
            for(PAstStructField e : copy)
            {
                e.apply(this);
            }
        }
        outAStructAstTypeExp(node);
    }

    public void inAAliasAstTypeExp(AAliasAstTypeExp node)
    {
        defaultIn(node);
    }

    public void outAAliasAstTypeExp(AAliasAstTypeExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAliasAstTypeExp(AAliasAstTypeExp node)
    {
        inAAliasAstTypeExp(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAAliasAstTypeExp(node);
    }

    public void inAAstStructField(AAstStructField node)
    {
        defaultIn(node);
    }

    public void outAAstStructField(AAstStructField node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAstStructField(AAstStructField node)
    {
        inAAstStructField(node);
        if(node.getAstTypeExp() != null)
        {
            node.getAstTypeExp().apply(this);
        }
        {
            List<TId> copy = new ArrayList<TId>(node.getId());
            Collections.reverse(copy);
            for(TId e : copy)
            {
                e.apply(this);
            }
        }
        outAAstStructField(node);
    }

    public void inAEmptyAstStm(AEmptyAstStm node)
    {
        defaultIn(node);
    }

    public void outAEmptyAstStm(AEmptyAstStm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyAstStm(AEmptyAstStm node)
    {
        inAEmptyAstStm(node);
        outAEmptyAstStm(node);
    }

    public void inAExpAstStm(AExpAstStm node)
    {
        defaultIn(node);
    }

    public void outAExpAstStm(AExpAstStm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpAstStm(AExpAstStm node)
    {
        inAExpAstStm(node);
        if(node.getAstExp() != null)
        {
            node.getAstExp().apply(this);
        }
        outAExpAstStm(node);
    }

    public void inAAssignAstStm(AAssignAstStm node)
    {
        defaultIn(node);
    }

    public void outAAssignAstStm(AAssignAstStm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignAstStm(AAssignAstStm node)
    {
        inAAssignAstStm(node);
        {
            List<PAstExp> copy = new ArrayList<PAstExp>(node.getRval());
            Collections.reverse(copy);
            for(PAstExp e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PAstExp> copy = new ArrayList<PAstExp>(node.getLval());
            Collections.reverse(copy);
            for(PAstExp e : copy)
            {
                e.apply(this);
            }
        }
        outAAssignAstStm(node);
    }

    public void inAOpAssignAstStm(AOpAssignAstStm node)
    {
        defaultIn(node);
    }

    public void outAOpAssignAstStm(AOpAssignAstStm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpAssignAstStm(AOpAssignAstStm node)
    {
        inAOpAssignAstStm(node);
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        if(node.getAstOpAssign() != null)
        {
            node.getAstOpAssign().apply(this);
        }
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        outAOpAssignAstStm(node);
    }

    public void inAVarDeclAstStm(AVarDeclAstStm node)
    {
        defaultIn(node);
    }

    public void outAVarDeclAstStm(AVarDeclAstStm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarDeclAstStm(AVarDeclAstStm node)
    {
        inAVarDeclAstStm(node);
        {
            List<PAstVarDecl> copy = new ArrayList<PAstVarDecl>(node.getAstVarDecl());
            Collections.reverse(copy);
            for(PAstVarDecl e : copy)
            {
                e.apply(this);
            }
        }
        outAVarDeclAstStm(node);
    }

    public void inAShortDeclAstStm(AShortDeclAstStm node)
    {
        defaultIn(node);
    }

    public void outAShortDeclAstStm(AShortDeclAstStm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAShortDeclAstStm(AShortDeclAstStm node)
    {
        inAShortDeclAstStm(node);
        {
            List<PAstExp> copy = new ArrayList<PAstExp>(node.getAstExp());
            Collections.reverse(copy);
            for(PAstExp e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PAstExp> copy = new ArrayList<PAstExp>(node.getIds());
            Collections.reverse(copy);
            for(PAstExp e : copy)
            {
                e.apply(this);
            }
        }
        outAShortDeclAstStm(node);
    }

    public void inATypeDeclAstStm(ATypeDeclAstStm node)
    {
        defaultIn(node);
    }

    public void outATypeDeclAstStm(ATypeDeclAstStm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeDeclAstStm(ATypeDeclAstStm node)
    {
        inATypeDeclAstStm(node);
        {
            List<PAstTypeDecl> copy = new ArrayList<PAstTypeDecl>(node.getAstTypeDecl());
            Collections.reverse(copy);
            for(PAstTypeDecl e : copy)
            {
                e.apply(this);
            }
        }
        outATypeDeclAstStm(node);
    }

    public void inAIncDecAstStm(AIncDecAstStm node)
    {
        defaultIn(node);
    }

    public void outAIncDecAstStm(AIncDecAstStm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIncDecAstStm(AIncDecAstStm node)
    {
        inAIncDecAstStm(node);
        if(node.getAstPostOp() != null)
        {
            node.getAstPostOp().apply(this);
        }
        if(node.getAstExp() != null)
        {
            node.getAstExp().apply(this);
        }
        outAIncDecAstStm(node);
    }

    public void inAPrintAstStm(APrintAstStm node)
    {
        defaultIn(node);
    }

    public void outAPrintAstStm(APrintAstStm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrintAstStm(APrintAstStm node)
    {
        inAPrintAstStm(node);
        {
            List<PAstExp> copy = new ArrayList<PAstExp>(node.getAstExp());
            Collections.reverse(copy);
            for(PAstExp e : copy)
            {
                e.apply(this);
            }
        }
        outAPrintAstStm(node);
    }

    public void inAPrintlnAstStm(APrintlnAstStm node)
    {
        defaultIn(node);
    }

    public void outAPrintlnAstStm(APrintlnAstStm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrintlnAstStm(APrintlnAstStm node)
    {
        inAPrintlnAstStm(node);
        {
            List<PAstExp> copy = new ArrayList<PAstExp>(node.getAstExp());
            Collections.reverse(copy);
            for(PAstExp e : copy)
            {
                e.apply(this);
            }
        }
        outAPrintlnAstStm(node);
    }

    public void inAReturnAstStm(AReturnAstStm node)
    {
        defaultIn(node);
    }

    public void outAReturnAstStm(AReturnAstStm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturnAstStm(AReturnAstStm node)
    {
        inAReturnAstStm(node);
        if(node.getAstExp() != null)
        {
            node.getAstExp().apply(this);
        }
        outAReturnAstStm(node);
    }

    public void inAShortifAstStm(AShortifAstStm node)
    {
        defaultIn(node);
    }

    public void outAShortifAstStm(AShortifAstStm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAShortifAstStm(AShortifAstStm node)
    {
        inAShortifAstStm(node);
        {
            List<PAstStm> copy = new ArrayList<PAstStm>(node.getAstStm());
            Collections.reverse(copy);
            for(PAstStm e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getCondition() != null)
        {
            node.getCondition().apply(this);
        }
        if(node.getInit() != null)
        {
            node.getInit().apply(this);
        }
        outAShortifAstStm(node);
    }

    public void inALongifAstStm(ALongifAstStm node)
    {
        defaultIn(node);
    }

    public void outALongifAstStm(ALongifAstStm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALongifAstStm(ALongifAstStm node)
    {
        inALongifAstStm(node);
        {
            List<PAstStm> copy = new ArrayList<PAstStm>(node.getElseStms());
            Collections.reverse(copy);
            for(PAstStm e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PAstStm> copy = new ArrayList<PAstStm>(node.getIfStms());
            Collections.reverse(copy);
            for(PAstStm e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getCondition() != null)
        {
            node.getCondition().apply(this);
        }
        if(node.getInit() != null)
        {
            node.getInit().apply(this);
        }
        outALongifAstStm(node);
    }

    public void inASwitchAstStm(ASwitchAstStm node)
    {
        defaultIn(node);
    }

    public void outASwitchAstStm(ASwitchAstStm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASwitchAstStm(ASwitchAstStm node)
    {
        inASwitchAstStm(node);
        {
            List<PAstSwitchStm> copy = new ArrayList<PAstSwitchStm>(node.getAstSwitchStm());
            Collections.reverse(copy);
            for(PAstSwitchStm e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getAstExp() != null)
        {
            node.getAstExp().apply(this);
        }
        if(node.getAstStm() != null)
        {
            node.getAstStm().apply(this);
        }
        outASwitchAstStm(node);
    }

    public void inAForAstStm(AForAstStm node)
    {
        defaultIn(node);
    }

    public void outAForAstStm(AForAstStm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForAstStm(AForAstStm node)
    {
        inAForAstStm(node);
        {
            List<PAstStm> copy = new ArrayList<PAstStm>(node.getBody());
            Collections.reverse(copy);
            for(PAstStm e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getPost() != null)
        {
            node.getPost().apply(this);
        }
        if(node.getCondition() != null)
        {
            node.getCondition().apply(this);
        }
        if(node.getInit() != null)
        {
            node.getInit().apply(this);
        }
        outAForAstStm(node);
    }

    public void inABlockAstStm(ABlockAstStm node)
    {
        defaultIn(node);
    }

    public void outABlockAstStm(ABlockAstStm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlockAstStm(ABlockAstStm node)
    {
        inABlockAstStm(node);
        {
            List<PAstStm> copy = new ArrayList<PAstStm>(node.getAstStm());
            Collections.reverse(copy);
            for(PAstStm e : copy)
            {
                e.apply(this);
            }
        }
        outABlockAstStm(node);
    }

    public void inABreakAstStm(ABreakAstStm node)
    {
        defaultIn(node);
    }

    public void outABreakAstStm(ABreakAstStm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABreakAstStm(ABreakAstStm node)
    {
        inABreakAstStm(node);
        outABreakAstStm(node);
    }

    public void inAContinueAstStm(AContinueAstStm node)
    {
        defaultIn(node);
    }

    public void outAContinueAstStm(AContinueAstStm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAContinueAstStm(AContinueAstStm node)
    {
        inAContinueAstStm(node);
        outAContinueAstStm(node);
    }

    public void inAParenAstExp(AParenAstExp node)
    {
        defaultIn(node);
    }

    public void outAParenAstExp(AParenAstExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParenAstExp(AParenAstExp node)
    {
        inAParenAstExp(node);
        if(node.getAstExp() != null)
        {
            node.getAstExp().apply(this);
        }
        outAParenAstExp(node);
    }

    public void inAIdAstExp(AIdAstExp node)
    {
        defaultIn(node);
    }

    public void outAIdAstExp(AIdAstExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdAstExp(AIdAstExp node)
    {
        inAIdAstExp(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdAstExp(node);
    }

    public void inALitAstExp(ALitAstExp node)
    {
        defaultIn(node);
    }

    public void outALitAstExp(ALitAstExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALitAstExp(ALitAstExp node)
    {
        inALitAstExp(node);
        if(node.getAstLiteral() != null)
        {
            node.getAstLiteral().apply(this);
        }
        outALitAstExp(node);
    }

    public void inAUnaryOpAstExp(AUnaryOpAstExp node)
    {
        defaultIn(node);
    }

    public void outAUnaryOpAstExp(AUnaryOpAstExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnaryOpAstExp(AUnaryOpAstExp node)
    {
        inAUnaryOpAstExp(node);
        if(node.getAstExp() != null)
        {
            node.getAstExp().apply(this);
        }
        if(node.getAstUnaryOp() != null)
        {
            node.getAstUnaryOp().apply(this);
        }
        outAUnaryOpAstExp(node);
    }

    public void inABinaryOpAstExp(ABinaryOpAstExp node)
    {
        defaultIn(node);
    }

    public void outABinaryOpAstExp(ABinaryOpAstExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABinaryOpAstExp(ABinaryOpAstExp node)
    {
        inABinaryOpAstExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getAstBinaryOp() != null)
        {
            node.getAstBinaryOp().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outABinaryOpAstExp(node);
    }

    public void inAFuncCallAstExp(AFuncCallAstExp node)
    {
        defaultIn(node);
    }

    public void outAFuncCallAstExp(AFuncCallAstExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncCallAstExp(AFuncCallAstExp node)
    {
        inAFuncCallAstExp(node);
        {
            List<PAstExp> copy = new ArrayList<PAstExp>(node.getArgs());
            Collections.reverse(copy);
            for(PAstExp e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAFuncCallAstExp(node);
    }

    public void inAAppendAstExp(AAppendAstExp node)
    {
        defaultIn(node);
    }

    public void outAAppendAstExp(AAppendAstExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAppendAstExp(AAppendAstExp node)
    {
        inAAppendAstExp(node);
        if(node.getAstExp() != null)
        {
            node.getAstExp().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAAppendAstExp(node);
    }

    public void inABasicCastAstExp(ABasicCastAstExp node)
    {
        defaultIn(node);
    }

    public void outABasicCastAstExp(ABasicCastAstExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABasicCastAstExp(ABasicCastAstExp node)
    {
        inABasicCastAstExp(node);
        if(node.getAstExp() != null)
        {
            node.getAstExp().apply(this);
        }
        if(node.getBasicTypes() != null)
        {
            node.getBasicTypes().apply(this);
        }
        outABasicCastAstExp(node);
    }

    public void inAArrayAccessAstExp(AArrayAccessAstExp node)
    {
        defaultIn(node);
    }

    public void outAArrayAccessAstExp(AArrayAccessAstExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayAccessAstExp(AArrayAccessAstExp node)
    {
        inAArrayAccessAstExp(node);
        if(node.getIndex() != null)
        {
            node.getIndex().apply(this);
        }
        if(node.getArray() != null)
        {
            node.getArray().apply(this);
        }
        outAArrayAccessAstExp(node);
    }

    public void inAFieldAccessAstExp(AFieldAccessAstExp node)
    {
        defaultIn(node);
    }

    public void outAFieldAccessAstExp(AFieldAccessAstExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFieldAccessAstExp(AFieldAccessAstExp node)
    {
        inAFieldAccessAstExp(node);
        if(node.getField() != null)
        {
            node.getField().apply(this);
        }
        if(node.getStruct() != null)
        {
            node.getStruct().apply(this);
        }
        outAFieldAccessAstExp(node);
    }

    public void inAAstSwitchStm(AAstSwitchStm node)
    {
        defaultIn(node);
    }

    public void outAAstSwitchStm(AAstSwitchStm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAstSwitchStm(AAstSwitchStm node)
    {
        inAAstSwitchStm(node);
        if(node.getAstFallthroughStm() != null)
        {
            node.getAstFallthroughStm().apply(this);
        }
        {
            List<PAstStm> copy = new ArrayList<PAstStm>(node.getAstStm());
            Collections.reverse(copy);
            for(PAstStm e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getAstSwitchCase() != null)
        {
            node.getAstSwitchCase().apply(this);
        }
        outAAstSwitchStm(node);
    }

    public void inADefaultAstSwitchCase(ADefaultAstSwitchCase node)
    {
        defaultIn(node);
    }

    public void outADefaultAstSwitchCase(ADefaultAstSwitchCase node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADefaultAstSwitchCase(ADefaultAstSwitchCase node)
    {
        inADefaultAstSwitchCase(node);
        outADefaultAstSwitchCase(node);
    }

    public void inACaseAstSwitchCase(ACaseAstSwitchCase node)
    {
        defaultIn(node);
    }

    public void outACaseAstSwitchCase(ACaseAstSwitchCase node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACaseAstSwitchCase(ACaseAstSwitchCase node)
    {
        inACaseAstSwitchCase(node);
        {
            List<PAstExp> copy = new ArrayList<PAstExp>(node.getAstExp());
            Collections.reverse(copy);
            for(PAstExp e : copy)
            {
                e.apply(this);
            }
        }
        outACaseAstSwitchCase(node);
    }

    public void inAIntAstLiteral(AIntAstLiteral node)
    {
        defaultIn(node);
    }

    public void outAIntAstLiteral(AIntAstLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntAstLiteral(AIntAstLiteral node)
    {
        inAIntAstLiteral(node);
        if(node.getIntLit() != null)
        {
            node.getIntLit().apply(this);
        }
        outAIntAstLiteral(node);
    }

    public void inAFloatAstLiteral(AFloatAstLiteral node)
    {
        defaultIn(node);
    }

    public void outAFloatAstLiteral(AFloatAstLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFloatAstLiteral(AFloatAstLiteral node)
    {
        inAFloatAstLiteral(node);
        if(node.getFloatLit() != null)
        {
            node.getFloatLit().apply(this);
        }
        outAFloatAstLiteral(node);
    }

    public void inARuneAstLiteral(ARuneAstLiteral node)
    {
        defaultIn(node);
    }

    public void outARuneAstLiteral(ARuneAstLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARuneAstLiteral(ARuneAstLiteral node)
    {
        inARuneAstLiteral(node);
        if(node.getRuneLit() != null)
        {
            node.getRuneLit().apply(this);
        }
        outARuneAstLiteral(node);
    }

    public void inAStringAstLiteral(AStringAstLiteral node)
    {
        defaultIn(node);
    }

    public void outAStringAstLiteral(AStringAstLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringAstLiteral(AStringAstLiteral node)
    {
        inAStringAstLiteral(node);
        if(node.getStringLit() != null)
        {
            node.getStringLit().apply(this);
        }
        outAStringAstLiteral(node);
    }

    public void inABoolAstLiteral(ABoolAstLiteral node)
    {
        defaultIn(node);
    }

    public void outABoolAstLiteral(ABoolAstLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoolAstLiteral(ABoolAstLiteral node)
    {
        inABoolAstLiteral(node);
        if(node.getBoolLit() != null)
        {
            node.getBoolLit().apply(this);
        }
        outABoolAstLiteral(node);
    }

    public void inAAddAstBinaryOp(AAddAstBinaryOp node)
    {
        defaultIn(node);
    }

    public void outAAddAstBinaryOp(AAddAstBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddAstBinaryOp(AAddAstBinaryOp node)
    {
        inAAddAstBinaryOp(node);
        outAAddAstBinaryOp(node);
    }

    public void inASubAstBinaryOp(ASubAstBinaryOp node)
    {
        defaultIn(node);
    }

    public void outASubAstBinaryOp(ASubAstBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubAstBinaryOp(ASubAstBinaryOp node)
    {
        inASubAstBinaryOp(node);
        outASubAstBinaryOp(node);
    }

    public void inAMulAstBinaryOp(AMulAstBinaryOp node)
    {
        defaultIn(node);
    }

    public void outAMulAstBinaryOp(AMulAstBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMulAstBinaryOp(AMulAstBinaryOp node)
    {
        inAMulAstBinaryOp(node);
        outAMulAstBinaryOp(node);
    }

    public void inADivAstBinaryOp(ADivAstBinaryOp node)
    {
        defaultIn(node);
    }

    public void outADivAstBinaryOp(ADivAstBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivAstBinaryOp(ADivAstBinaryOp node)
    {
        inADivAstBinaryOp(node);
        outADivAstBinaryOp(node);
    }

    public void inAModAstBinaryOp(AModAstBinaryOp node)
    {
        defaultIn(node);
    }

    public void outAModAstBinaryOp(AModAstBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModAstBinaryOp(AModAstBinaryOp node)
    {
        inAModAstBinaryOp(node);
        outAModAstBinaryOp(node);
    }

    public void inABitorAstBinaryOp(ABitorAstBinaryOp node)
    {
        defaultIn(node);
    }

    public void outABitorAstBinaryOp(ABitorAstBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABitorAstBinaryOp(ABitorAstBinaryOp node)
    {
        inABitorAstBinaryOp(node);
        outABitorAstBinaryOp(node);
    }

    public void inABitandAstBinaryOp(ABitandAstBinaryOp node)
    {
        defaultIn(node);
    }

    public void outABitandAstBinaryOp(ABitandAstBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABitandAstBinaryOp(ABitandAstBinaryOp node)
    {
        inABitandAstBinaryOp(node);
        outABitandAstBinaryOp(node);
    }

    public void inAEqAstBinaryOp(AEqAstBinaryOp node)
    {
        defaultIn(node);
    }

    public void outAEqAstBinaryOp(AEqAstBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqAstBinaryOp(AEqAstBinaryOp node)
    {
        inAEqAstBinaryOp(node);
        outAEqAstBinaryOp(node);
    }

    public void inANoteqAstBinaryOp(ANoteqAstBinaryOp node)
    {
        defaultIn(node);
    }

    public void outANoteqAstBinaryOp(ANoteqAstBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANoteqAstBinaryOp(ANoteqAstBinaryOp node)
    {
        inANoteqAstBinaryOp(node);
        outANoteqAstBinaryOp(node);
    }

    public void inALtAstBinaryOp(ALtAstBinaryOp node)
    {
        defaultIn(node);
    }

    public void outALtAstBinaryOp(ALtAstBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALtAstBinaryOp(ALtAstBinaryOp node)
    {
        inALtAstBinaryOp(node);
        outALtAstBinaryOp(node);
    }

    public void inALeqAstBinaryOp(ALeqAstBinaryOp node)
    {
        defaultIn(node);
    }

    public void outALeqAstBinaryOp(ALeqAstBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALeqAstBinaryOp(ALeqAstBinaryOp node)
    {
        inALeqAstBinaryOp(node);
        outALeqAstBinaryOp(node);
    }

    public void inAGtAstBinaryOp(AGtAstBinaryOp node)
    {
        defaultIn(node);
    }

    public void outAGtAstBinaryOp(AGtAstBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGtAstBinaryOp(AGtAstBinaryOp node)
    {
        inAGtAstBinaryOp(node);
        outAGtAstBinaryOp(node);
    }

    public void inAGeqAstBinaryOp(AGeqAstBinaryOp node)
    {
        defaultIn(node);
    }

    public void outAGeqAstBinaryOp(AGeqAstBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGeqAstBinaryOp(AGeqAstBinaryOp node)
    {
        inAGeqAstBinaryOp(node);
        outAGeqAstBinaryOp(node);
    }

    public void inACaretAstBinaryOp(ACaretAstBinaryOp node)
    {
        defaultIn(node);
    }

    public void outACaretAstBinaryOp(ACaretAstBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACaretAstBinaryOp(ACaretAstBinaryOp node)
    {
        inACaretAstBinaryOp(node);
        outACaretAstBinaryOp(node);
    }

    public void inALshiftAstBinaryOp(ALshiftAstBinaryOp node)
    {
        defaultIn(node);
    }

    public void outALshiftAstBinaryOp(ALshiftAstBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALshiftAstBinaryOp(ALshiftAstBinaryOp node)
    {
        inALshiftAstBinaryOp(node);
        outALshiftAstBinaryOp(node);
    }

    public void inARshiftAstBinaryOp(ARshiftAstBinaryOp node)
    {
        defaultIn(node);
    }

    public void outARshiftAstBinaryOp(ARshiftAstBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARshiftAstBinaryOp(ARshiftAstBinaryOp node)
    {
        inARshiftAstBinaryOp(node);
        outARshiftAstBinaryOp(node);
    }

    public void inABitclearAstBinaryOp(ABitclearAstBinaryOp node)
    {
        defaultIn(node);
    }

    public void outABitclearAstBinaryOp(ABitclearAstBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABitclearAstBinaryOp(ABitclearAstBinaryOp node)
    {
        inABitclearAstBinaryOp(node);
        outABitclearAstBinaryOp(node);
    }

    public void inAOrAstBinaryOp(AOrAstBinaryOp node)
    {
        defaultIn(node);
    }

    public void outAOrAstBinaryOp(AOrAstBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrAstBinaryOp(AOrAstBinaryOp node)
    {
        inAOrAstBinaryOp(node);
        outAOrAstBinaryOp(node);
    }

    public void inAAndAstBinaryOp(AAndAstBinaryOp node)
    {
        defaultIn(node);
    }

    public void outAAndAstBinaryOp(AAndAstBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndAstBinaryOp(AAndAstBinaryOp node)
    {
        inAAndAstBinaryOp(node);
        outAAndAstBinaryOp(node);
    }

    public void inAAddEqAstOpAssign(AAddEqAstOpAssign node)
    {
        defaultIn(node);
    }

    public void outAAddEqAstOpAssign(AAddEqAstOpAssign node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddEqAstOpAssign(AAddEqAstOpAssign node)
    {
        inAAddEqAstOpAssign(node);
        outAAddEqAstOpAssign(node);
    }

    public void inASubEqAstOpAssign(ASubEqAstOpAssign node)
    {
        defaultIn(node);
    }

    public void outASubEqAstOpAssign(ASubEqAstOpAssign node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubEqAstOpAssign(ASubEqAstOpAssign node)
    {
        inASubEqAstOpAssign(node);
        outASubEqAstOpAssign(node);
    }

    public void inAMulEqAstOpAssign(AMulEqAstOpAssign node)
    {
        defaultIn(node);
    }

    public void outAMulEqAstOpAssign(AMulEqAstOpAssign node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMulEqAstOpAssign(AMulEqAstOpAssign node)
    {
        inAMulEqAstOpAssign(node);
        outAMulEqAstOpAssign(node);
    }

    public void inADivEqAstOpAssign(ADivEqAstOpAssign node)
    {
        defaultIn(node);
    }

    public void outADivEqAstOpAssign(ADivEqAstOpAssign node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivEqAstOpAssign(ADivEqAstOpAssign node)
    {
        inADivEqAstOpAssign(node);
        outADivEqAstOpAssign(node);
    }

    public void inAModEqAstOpAssign(AModEqAstOpAssign node)
    {
        defaultIn(node);
    }

    public void outAModEqAstOpAssign(AModEqAstOpAssign node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModEqAstOpAssign(AModEqAstOpAssign node)
    {
        inAModEqAstOpAssign(node);
        outAModEqAstOpAssign(node);
    }

    public void inABitorEqAstOpAssign(ABitorEqAstOpAssign node)
    {
        defaultIn(node);
    }

    public void outABitorEqAstOpAssign(ABitorEqAstOpAssign node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABitorEqAstOpAssign(ABitorEqAstOpAssign node)
    {
        inABitorEqAstOpAssign(node);
        outABitorEqAstOpAssign(node);
    }

    public void inABitandEqAstOpAssign(ABitandEqAstOpAssign node)
    {
        defaultIn(node);
    }

    public void outABitandEqAstOpAssign(ABitandEqAstOpAssign node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABitandEqAstOpAssign(ABitandEqAstOpAssign node)
    {
        inABitandEqAstOpAssign(node);
        outABitandEqAstOpAssign(node);
    }

    public void inACaretEqAstOpAssign(ACaretEqAstOpAssign node)
    {
        defaultIn(node);
    }

    public void outACaretEqAstOpAssign(ACaretEqAstOpAssign node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACaretEqAstOpAssign(ACaretEqAstOpAssign node)
    {
        inACaretEqAstOpAssign(node);
        outACaretEqAstOpAssign(node);
    }

    public void inALshiftEqAstOpAssign(ALshiftEqAstOpAssign node)
    {
        defaultIn(node);
    }

    public void outALshiftEqAstOpAssign(ALshiftEqAstOpAssign node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALshiftEqAstOpAssign(ALshiftEqAstOpAssign node)
    {
        inALshiftEqAstOpAssign(node);
        outALshiftEqAstOpAssign(node);
    }

    public void inARshiftEqAstOpAssign(ARshiftEqAstOpAssign node)
    {
        defaultIn(node);
    }

    public void outARshiftEqAstOpAssign(ARshiftEqAstOpAssign node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARshiftEqAstOpAssign(ARshiftEqAstOpAssign node)
    {
        inARshiftEqAstOpAssign(node);
        outARshiftEqAstOpAssign(node);
    }

    public void inABitclearEqAstOpAssign(ABitclearEqAstOpAssign node)
    {
        defaultIn(node);
    }

    public void outABitclearEqAstOpAssign(ABitclearEqAstOpAssign node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABitclearEqAstOpAssign(ABitclearEqAstOpAssign node)
    {
        inABitclearEqAstOpAssign(node);
        outABitclearEqAstOpAssign(node);
    }

    public void inAPlusAstUnaryOp(APlusAstUnaryOp node)
    {
        defaultIn(node);
    }

    public void outAPlusAstUnaryOp(APlusAstUnaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusAstUnaryOp(APlusAstUnaryOp node)
    {
        inAPlusAstUnaryOp(node);
        outAPlusAstUnaryOp(node);
    }

    public void inAMinusAstUnaryOp(AMinusAstUnaryOp node)
    {
        defaultIn(node);
    }

    public void outAMinusAstUnaryOp(AMinusAstUnaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusAstUnaryOp(AMinusAstUnaryOp node)
    {
        inAMinusAstUnaryOp(node);
        outAMinusAstUnaryOp(node);
    }

    public void inANotAstUnaryOp(ANotAstUnaryOp node)
    {
        defaultIn(node);
    }

    public void outANotAstUnaryOp(ANotAstUnaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotAstUnaryOp(ANotAstUnaryOp node)
    {
        inANotAstUnaryOp(node);
        outANotAstUnaryOp(node);
    }

    public void inACaretAstUnaryOp(ACaretAstUnaryOp node)
    {
        defaultIn(node);
    }

    public void outACaretAstUnaryOp(ACaretAstUnaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACaretAstUnaryOp(ACaretAstUnaryOp node)
    {
        inACaretAstUnaryOp(node);
        outACaretAstUnaryOp(node);
    }

    public void inAIncAstPostOp(AIncAstPostOp node)
    {
        defaultIn(node);
    }

    public void outAIncAstPostOp(AIncAstPostOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIncAstPostOp(AIncAstPostOp node)
    {
        inAIncAstPostOp(node);
        outAIncAstPostOp(node);
    }

    public void inADecAstPostOp(ADecAstPostOp node)
    {
        defaultIn(node);
    }

    public void outADecAstPostOp(ADecAstPostOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecAstPostOp(ADecAstPostOp node)
    {
        inADecAstPostOp(node);
        outADecAstPostOp(node);
    }

    public void inAAstFallthroughStm(AAstFallthroughStm node)
    {
        defaultIn(node);
    }

    public void outAAstFallthroughStm(AAstFallthroughStm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAstFallthroughStm(AAstFallthroughStm node)
    {
        inAAstFallthroughStm(node);
        outAAstFallthroughStm(node);
    }
}
