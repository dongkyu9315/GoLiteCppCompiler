Package goplusplus;

/*==========================*/
/*			Helpers			*/
/*==========================*/
Helpers
	all 		= [0 .. 0xFF];
	tab   		= 9;
	cr    		= 13;
	lf    		= 10;
	newline		= cr | lf | cr lf;
	dec_digit 	= ['0'..'9'];
	oct_digit	= ['0'..'7'];
	hex_digit	= ['0'..'9'] | ['A'..'F'] | ['a'..'f'];
	lowercase 	= ['a'..'z'];
	uppercase 	= ['A'..'Z'];
	letter  	= lowercase | uppercase;
	idletter 	= letter | '_';
	idchar  	= letter | '_' | dec_digit;
	printable 	= [0x20 .. 0xFF];
	char 		= printable | tab;
	comment_lin = '//';
	comment_beg = '/*';
	comment_end = '*/';
	dec 		= ['1'..'9'] (dec_digit)*;
	oct			= '0' (oct_digit)*;
	hex			= '0' ('x' | 'X') (hex_digit)+;


/*==========================*/
/*			Tokens			*/
/*==========================*/
Tokens
	eol			= newline;
	blank 		= ' ' | tab;

/*Keywords*/
	break		= 'break';
	default		= 'default';
	func		= 'func';
	interface	= 'interface';
	select		= 'select';
	case		= 'case';
	defer		= 'defer';
	go 			= 'go';
	map			= 'map';
	struct		= 'struct';
	chan		= 'chan';
	else		= 'else';
	goto		= 'goto';
	package		= 'package';
	switch		= 'switch';
	const		= 'const';
	fallthrough	= 'fallthrough';
	if			= 'if';
	range		= 'range';
	type		= 'type';
	continue	= 'continue';
	for			= 'for';
	import		= 'import';
	return		= 'return';
	var			= 'var';
	basic_types	= 'int' | 'float64' | 'bool' | 'rune' | 'string';
	print		= 'print';
	println		= 'println';
	append		= 'append';

/*Operators*/
	add			= '+';
	sub			= '-';
	mul			= '*';
	div			= '/';
	mod			= '%';
	bit_and		= '&';
	bit_or		= '|';
	caret		= '^';
	lshift		= '<<';
	rshift		= '>>';
	bitclear	= '&^';
	pluseq		= '+=';
	subeq		= '-=';
	muleq		= '*=';
	diveq		= '/=';
	modeq		= '%=';
	andeq		= '&=';
	oreq		= '|=';
	xoreq		= '^=';
	lshifteq	= '<<=';
	rshifteq	= '>>=';
	bitcleareq	= '&^=';
	and			= '&&';
	or			= '||';
	receive		= '<-';
	increment	= '++';
	decrement	= '--';
	eq			= '==';
	lt			= '<';
	gt			= '>';
	assign		= '=';
	not			= '!';
	noteq		= '!=';
	leq			= '<=';
	geq			= '>=';
	shortdecl	= ':=';
	varargs		= '...';
	leftpar		= '(';
	leftsq		= '[';
	leftcurl	= '{';
	comma		= ',';
	dot 		= '.';
	rightpar	= ')';
	rightsq		= ']';
	rightcurl	= '}';
	semi	= ';';
	colon		= ':';
	
/*Comment*/
	line_comment 		= comment_lin all* newline;
	block_comment	 	= comment_beg all* comment_end;

/*Literals*/
	escaped_char 		= '\' ('a' | 'b' | 'f' | 'n' | 'r' | 't' | 'v' | '\' | ''' | '"');
	int_lit				= dec | oct | hex;
	float_lit 			= ((dec_digit)* '.' (dec_digit)+) | ((dec_digit)+ '.' (dec_digit)*);
	raw_string 			= ''' (char | newline)* ''';
	interpreted_string 	= '"' (char | newline)* '"';

/*Identifiers*/
	id = idletter idchar*;


Ignored Tokens
	blank, eol, line_comment, block_comment;


/*==========================*/
/*		Productions			*/
/*==========================*/
Productions
	prod_program {-> ast_program} =
		package id semi prod_decl*
			{-> New ast_program(id, [prod_decl.ast_decl])}
	;

	prod_decl {-> ast_decl} =
		{variable} var prod_var_decl semi
			{-> New ast_decl.var_dec(prod_var_decl.ast_var_decl)}
	|	{type} type prod_type_decl semi
			{-> New ast_decl.type_dec(prod_type_decl.ast_type_decl)}
	|	{function} func prod_func_decl semi
			{-> New ast_decl.func_dec(prod_func_decl.ast_func_decl)}
	;

	prod_id_list {-> id*} =
		 id prod_id_tail*
		 	{-> [id, prod_id_tail.id]}
	;

	prod_id_tail {-> id} =
		comma id
			{-> id}
	;

	prod_exp_list {-> ast_exp*} =
		prod_exp prod_exp_tail*
			{-> [prod_exp.ast_exp, prod_exp_tail.ast_exp]}
	;

	prod_exp_tail {-> ast_exp} =
		comma prod_exp
			{-> prod_exp.ast_exp}
	;
	
	prod_exp {-> ast_exp} =;

	/*======================*/
	/*		Declaration		*/
	/*======================*/

	prod_var_decl {-> ast_var_decl} = 
		{single}	prod_var_decl_single
			{-> prod_var_decl_single.ast_var_decl}
	|	{list}		leftpar prod_var_decl_single_semi* rightpar
			{-> prod_var_decl_single_semi.ast_var_decl}
	;

	prod_var_decl_single {-> ast_var_decl} = 
		{type}		prod_id_list prod_type_exp
			{-> New ast_var_decl.type([prod_id_list.id], ast_type_exp.ast_type_exp)}
	|	{expr}		prod_id_list assign prod_exp_list
			{-> New ast_var_decl.exp([prod_id_list.id], [prod_exp_list.prod_exp])}
	|	{type_exp}	prod_id_list prod_type_exp assign prod_exp_list
			{-> New ast_var_decl.type_exp([prod_id_list.id], ast_type_exp.ast_type_exp, [prod_exp_list.prod_exp])}
	;

	prod_var_decl_single_semi {-> ast_var_decl} =
		prod_var_decl_single semi
			{-> prod_var_decl_single.ast_var_decl}
	;

	prod_type_decl {-> ast_type_decl} =
		{single}	prod_type_decl_single
			{-> ast_type_decl_single.ast_type_decl}
	|	{list}		leftpar prod_type_decl_single_semi* rightpar
			{-> ast_type_decl_single_semi.ast_type_decl}
	;

	prod_type_decl_single {-> ast_type_decl} =
		id prod_type_exp
			{-> New ast_type_decl(id, prod_type_exp.ast_type_exp)}
	;

	prod_type_decl_single_semi {-> ast_type_decl} =
		prod_type_decl_single semi
			{-> prod_type_decl_single.ast_type_decl}
	;

	prod_type_exp {-> ast_type_exp} =
		{basic}		basic_types
			{-> New ast_type_exp.basic(basic_types)}
	|	{slice}		leftsq rightsq prod_type_exp
			{-> New ast_type_exp.slice(ast_type_exp)}
	|	{array}		leftsq int_lit rightsq prod_type_exp
			{-> New ast_type_exp.array(int_lit, prod_type_exp)}
	|	{struct}	struct leftcurl prod_struct_field* rightcurl
			{-> New ast_type_exp.struct([prod_struct_decl.ast_struct_field])}
	;

	prod_struct_field {-> ast_struct_field} =
		prod_id_list prod_type_exp semi
			{-> New ast_struct_field([prod_id_list.id], prod_type_exp.ast_type_exp)}
	;

	prod_func_decl {-> ast_func_decl} =
		id leftpar prod_func_param? rightpar prod_type_exp? prod_block
			{-> New ast_func_decl(id, prod_func_param.ast_func_param)}
	;

	prod_func_param {-> ast_func_param*} = 
		prod_id_list prod_type_exp prod_func_param_tail*
			{-> [New ast_func_param([prod_id_list.id], prod_type_exp.ast_type_ast), prod_func_param_tail.ast_func_param]}
	;

	prod_func_param_tail {-> ast_func_param}=
		comma prod_func_param
			{-> prod_func_param.ast_func_param}
	;

	prod_block =
		leftcurl rightcurl
	;

/*==========================*/
/*			AST				*/
/*==========================*/
Abstract Syntax Tree
	ast_program = 
		[package]:id [decl]:ast_decl*
	;
	
	ast_decl = 
		{var_dec}			ast_var_decl
	|	{type_dec} 			ast_type_decl
	|	{func_dec}			ast_func_decl
	;
	
	ast_var_decl = 
		{type} 	id+ ast_type_exp
	|	{exp} 	id+ ast_exp+
	|	{type_exp} 	id+ ast_type_exp ast_exp+
	;

	ast_type_decl = 
		id+ ast_type_exp+
	;
	
	ast_func_decl = 
		id ast_func_param* ast_type_exp? ast_stm
	;
	
	ast_func_param = 
		id+ ast_type_exp
	;
	
	ast_type_exp = 
		{basic}		basic_types
	|	{slice}		ast_type_exp
	|	{array}		[size]:int_lit ast_type_exp
	|	{struct}	ast_struct_field*
	|	{alias}		id
	;

	ast_struct_field = 
		id+ ast_type_exp
	;
	
	ast_stm =
		{empty}
	|	{exp}			ast_exp
	|	{assign}		[lval]:ast_exp+ [rval]:ast_exp+
	|	{op_assign}		[l]:ast_exp binary_op [r]:ast_exp
	|	{var_decl}		ast_var_decl+
	|	{short_decl}	[ids]:ast_exp+ ast_exp+
	|	{type_decl}		ast_type_decl+
	|	{inc_dec}		ast_exp post_op
	|	{print}			ast_exp*
	|	{println}		ast_exp*
	|	{return}		ast_exp?
	|	{shortif}		[init]:ast_stm? [condition]:ast_exp ast_stm*
	|	{longif}		[init]:ast_stm? [condition]:ast_exp [if_stms]:ast_stm* elseif* [else_stms]:ast_stm*
	|	{switch}		ast_stm? ast_exp? switch_case+
	|	{for}			[init]:ast_stm? [condition]:ast_exp? [post]:ast_stm? [body]:ast_stm*
	|	{break}
	|	{continue}
	;
	
	ast_exp = 
		{paren}			ast_exp
	|	{id}			id
	|	{lit}			literal
	|	{unary_op}		unary_op ast_exp
	|	{binary_op}		[left]:ast_exp binary_op [right]:ast_exp
	|	{func_call}		[name]:ast_exp [args]:ast_exp*
	|	{apppend}		id ast_exp
	|	{cast}			ast_type_exp ast_exp
	|	{array_access}	[array]:ast_exp [index]:ast_exp
	|	{field_access}	[struct]:ast_exp [field]:id
	;

	elseif = 
		[condition]:ast_exp ast_stm*
	;
	
	switch_case = 
		{default}		ast_stm*
	|	{case} 			ast_exp+ ast_stm*
	;
	
	literal = 
		{int}	 	int_lit
	|	{float} 	float_lit
	;

	binary_op = 
		{add}
	|	{sub}
	|	{mul}
	|	{div}
	|	{mod}
	|	{bitor}
	|	{bitand}
	|	{bitxor}
	|	{lshift}
	|	{rshift}
	|	{bitclear}
	;
	
	unary_op = 
		{plus}	ast_exp 
	|	{minus} ast_exp
	| 	{not}	ast_exp
	|	{caret}	ast_exp
	;
	
	post_op = 
		{inc}
	|	{dec}
	;